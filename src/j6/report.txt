学籍番号: 2210342
氏名: 鈴木謙太郎
---

# 問題1

## 1.1
式: (apple orange pear grapefruit)
解答: (car(cdr(cdr '(apple orange pear grapefruit))))
解答(合成): (caddr '(apple orange pear grapefruit))

## 1.2
式: ((apple orange) (pear grapefruit))
解答: (car(car(cdr '((apple orange) (pear grapefruit)))))
解答(合成): (caadr '((apple orange) (pear grapefruit)))

## 1.3
式: (((apple) (orange) (pear) (grapefruit)))
解答: (car(car(cdr(cdr(car '(((apple) (orange) (pear) (grapefruit))))))))
解答(合成): (car (caddar '(((apple) (orange) (pear) (grapefruit))))) ;PEARだけを含むリストを取り出すまでと、そこからPEARを取り出すまでを分けている

## 1.4
式: (apple (orange) ((pear)) (((grapefruit))))
解答: (car(car(car(cdr(cdr(car '((apple (orange) ((pear)) (((grapefruit)))))))))))
解答(合成): (caar (caddar '((apple (orange) ((pear)) (((grapefruit))))))) ;PEARだけを含むリストを取り出すまでと、そこからPEARを取り出すまでを分けている

## 1.5
式: ((((apple))) ((orange)) (pear) grapefruit)
解答: (car(car(cdr(cdr '((((apple))) ((orange)) (pear) grapefruit)))))
解答(合成): (car (caddr '((((apple))) ((orange)) (pear) grapefruit))) ;PEARだけを含むリストを取り出すまでと、そこからPEARを取り出すまでを分けている

## 1.6
式: ((((apple) orange) pear) grapefruit)
解答: (car(cdr(car '((((apple) orange) pear) grapefruit))))
解答(合成): (cadar '((((apple) orange) pear) grapefruit))

---

# 問題2

1行目でtoolsに['hammer', 'screwdriver']を代入している。
2行目でtoolsの先頭に'pliers'を追加しているが、consは非破壊的な操作であるため、3行目で出力させたtoolsの値は変わらない。
4行目では2行目と同じconsの結果をtoolsに再代入しているので、5行目では変更後のtoolsの値が出力される。

6行目以降のappendにおいても同様であり、これは非破壊的な操作であるため明示的にtoolsに結果を再代入しないとtoolsの値は変わらない。

```clisp
[1]> (set 'tools (list 'hammer 'screwdriver))
(cons 'pliers tools)
tools
(set 'tools (cons 'pliers tools))
tools
(append '(saw wrench) tools)
tools
(set 'tools (append '(saw wrench) tools))
tools
(HAMMER SCREWDRIVER)
[2]>
(PLIERS HAMMER SCREWDRIVER)
[3]>
(HAMMER SCREWDRIVER)
[4]>
(PLIERS HAMMER SCREWDRIVER)
[5]>
(PLIERS HAMMER SCREWDRIVER)
[6]>
(SAW WRENCH PLIERS HAMMER SCREWDRIVER)
[7]>
(PLIERS HAMMER SCREWDRIVER)
[8]>
(SAW WRENCH PLIERS HAMMER SCREWDRIVER)
[9]>
(SAW WRENCH PLIERS HAMMER SCREWDRIVER)
```

---

# 問題3

lengthは引数に与えられたリストの直下の子要素を数える。
そのため、(plato socrates aristotle)は3つの要素を持つリストであるため、3が返される。
((plato) (socrates) (aristotle))は3つのリストを要素とするリストであるため、3が返される。
((plato socrates aristotle))は3つの要素を持つ1つのリストを要素とするリストであるため、1が返される。


```clisp
[1]> (length '(plato socrates aristotle))
3
[2]> (length '((plato) (socrates) (aristotle)))
3
[3]> (length '((plato socrates aristotle)))
1
```

3行目で与えられたリストから3の出力を得たければ、次のようになるだろう。

```clisp
[4]> (length (car '((plato socrates aristotle))))
3
```

---

# 問題4

問題3と同様の構造のデータである。
reverseは引数に与えられたリストの直下の子要素を逆順に並べたリストを返す。

(plato socrates aristotle)は3つの要素を持つリストであるため、(aristotle socrates plato)が返される。
((plato) (socrates) (aristotle))は3つのリストを要素とするリストであるため、(aristotle socrates plato)が返される。
((plato socrates aristotle))は3つの要素を持つ1つのリストを要素とするリストであるため、((plato socrates aristotle))が返される。


```clisp
[1]> (reverse '(plato socrates aristotle))
(ARISTOTLE SOCRATES PLATO)
[2]> (reverse '((plato) (socrates) (aristotle)))
((ARISTOTLE) (SOCRATES) (PLATO))
[3]> (reverse '((plato socrates aristotle)))
((PLATO SOCRATES ARISTOTLE))
```

3行目で与えられたリストから((ARISTOTLE SOCRATES PLATO))の出力を得たければ、次のようになるだろう。

```clisp
[4]> (list (reverse (car '((plato socrates aristotle)))))
((ARISTOTLE SOCRATES PLATO))
```

---

# 問題5

appendは2つのリストを結合するので、appendに要素数2のリスト, 要素数2のリストを与えると、要素数4のリストが返される。

substはリストの中から指定された要素を探し、指定された要素に置き換える。


```clisp
[1]> (length '((car chevrolet) (drink coke) (cereal wheaties)))
3
[2]> (reverse '((car chevrolet) (drink coke) (cereal wheaties)))
((CEREAL WHEATIES) (DRINK COKE) (CAR CHEVROLET))
[3]> (append '((car chevrolet) (drink coke)) (reverse '((car chevrolet) (drink coke))))
((CAR CHEVROLET) (DRINK COKE) (DRINK COKE) (CAR CHEVROLET))
[4]> (subst 'out 'in '(the ball is in))
(THE BALL IS OUT)
[5]> (subst 'in 'out '(the ball is in))
(THE BALL IS IN)
[6]> (last '(the ball is in))
(IN)
```

ところで、プログラミング言語によっては文字列を文字のリストとして扱っている場合がある。
その場合文字列にsubstを適用すると、文字列の中から指定された文字を探し、指定された文字に置き換えることになる。
実際に動くのか試した。

```bash
[7]> (subst 'a 'b 'abc)
ABC
```

substは文字列に対して適用できなかった。

---

# 問題6

```lisp
(defun first1 (lst)
    "Return the first element of a lst"
    ; (first1 '(1 2 3)) => 1
    ; (first1 '()) => nil
     (if (null lst) nil ; if the lst is empty, return nil
    (car lst)
))

(defun rest1 (lst)
    "Return the rest of the elements of a lst"
    ; (rest1 '(1 2 3)) => (2 3)
    ; (rest1 '()) => nil
    (if (null lst) nil ; if the lst is empty, return nil
    (cdr lst)
))

(defun insert (elm lst)
    "Insert an element at the beginning of a lst"
    ; (insert 1 '(2 3)) => (1 2 3)
    ; (insert 1 '()) => (1)
    (if (null lst) (list elm) ; if the lst is empty, return a lst with the element
    (cons elm lst)))

(defun second1 (lst)
    "Return the second element of a lst"
    ; (second1 '(1 2 3)) => 2
    ; (second1 '()) => nil
    (first1 (rest1 lst)))

(defun third1 (lst)
    "Return the third element of a lst"
    ; (third1 '(1 2 3)) => 3
    ; (third1 '()) => nil
(first1 (rest1 (rest1 lst))))

```

---

# 問題7

```lisp
(defun rotate-1 (ary)
    "Rotate the array by 1 element to the left"
    ; (rotate-1 '(1 2 3 4)) => (2 3 4 1)
    (append (rest ary) (list(car ary))))

```

---

# 問題8

```lisp
(defun palindrome (ary)
  "Make a palindrome with the given list"
  ; (palindrome '(1 2 3)) => (1 2 3 3 2 1)
  (append ary (reverse ary)))

```

---

# 問題9

```lisp
(defun palindromep (list)
  "Return t if list is a palindrome, nil otherwise."
  ; (palindromep '(a b c b a)) => t
  ; (palindromep '(a b c c b a)) => t
  ; (palindromep '(a b c d e)) => nil
  (equal list (reverse list)))

```

---

# 問題10

```lisp
(defun check-temperture (temp)
  "Check the temperature and return a symbol indicating the temperature range."
  ; (check-temperture 100) => OK
  ; (check-temperture 101) => RIDICULOUSLY-HOT
  ; (check-temperture -1) => RIDICULOUSLY-COLD
  ; (check-temperture 0) => OK
  ; (check-temperture 50) => OK
  (cond ((> temp 100) 'RIDICULOUSLY-HOT)
        ((< temp 0) 'RIDICULOUSLY-COLD)
        (t 'OK)))

```

---

# 問題11

```lisp
(defun my-reverse (ary)
  "Reverse the order of elements in a list."
  ; (my-reverse '(1 2 3 4 5)) => (5 4 3 2 1)
  ; (my-reverse '(1 (2 3) 4 5)) => (5 4 (2 3) 1)
  (if (equalp (length ary) 1) ary ; if the list has only one element, return it
    (append (my-reverse (cdr ary)) (list (car ary)))
  ))

(defun al-reverse (ary)
  "Reverse the order of elements in a nested list."
  (if (equalp (length ary) 1) ary
    (append (al-reverse (cdr ary)) (list (if (listp (car ary)) (al-reverse (car ary)) (car ary)))
    ; move the first element to the end of the list
    ; then recursively call al-reverse on the rest of the list
    )))
```

---

# 問題12

```lisp
(defun max-1 (ary)
    "Return the maximum element of a list of numbers."
    ; (max-1 '(1 2 3 4 5)) => 5
    ; (max-1 '(5 4 3 2 1)) => 5
    (cond ((null ary) nil)
          ((null (cdr ary)) (car ary))
          (t (max (car ary) (max-1 (cdr ary))))))

(defun al-max (ary)
    "Return the maximum element of a nested list of numbers."
    ; (al-max '(1 2 3 4 5)) => 5
    ; (al-max '(4 (5 3) 2 1)) => 5
    (cond ((null ary) nil)
        ((atom ary) ary)
        ((equalp (length ary) 1) (
            if (listp (car ary))
                (al-max (car ary))
                (car ary)))
        (t (max (al-max (car ary)) (al-max (cdr ary))))))
```

---

# 問題13

```lisp
(defun al-member (atm lst)
    "Return t if atm is a member of lst, nil otherwise."
    ; (al-member 'a '(a b c)) => t
    ; (al-member 'd '(a b c)) => nil
    ; (al-member 'a '(b ((a) c) d)) => t
    (cond ((null lst) nil) ; if lst is empty, return nil
          ((atom lst) (if (eq atm lst) t nil)) ; if lst is an atom, return t if atm is equal to lst, nil otherwise
          ; recursively check if atm is a member of the car or cdr of lst
            (t (or (al-member atm (car lst))
                     (al-member atm (cdr lst))))))
```

---

# 問題14

```lisp
(defun my-union (lst1 lst2)
    "Return the union of two lists lst1 and lst2."
    ; (my-union '(1 2 3) '(3 4 5)) => (1 2 3 4 5)
    (cond
        ((null lst1) lst2) ; If lst1 is empty, return lst2.
        ((member (car lst1) lst2) (my-union (cdr lst1) lst2)) ; If the first element of lst1 is in lst2, skip it.
        (t (cons (car lst1) (my-union (cdr lst1) lst2))) ; Otherwise, add it to the union.
    )
)
```

---

# 問題15

```lisp
(defun my-intersection (lst1 lst2)
    "Return the intersection of two lists lst1 and lst2."
    ; (my-intersection '(1 2 3) '(3 4 5)) => (3)
    (cond
        ((null lst1) nil) ; If lst1 is empty, return nil.
        ((member (car lst1) lst2) (cons (car lst1) (my-intersection (cdr lst1) lst2))) ; If the first element of lst1 is in lst2, add it to the intersection.
        (t (my-intersection (cdr lst1) lst2)) ; Otherwise, skip first element of lst1.
    )
)
```

---

# 問題16

```lisp
(defun intersectp (lst1 lst2)
    "Return t if the intersection of two lists lst1 and lst2 is not empty. Otherwise, return nil."
    ; (intersectp '(1 2 3) '(3 4 5)) => t
    (not (null (my-intersection lst1 lst2))) ; If the intersection is not empty, return t.
)
```

---

# 問題17

```lisp
(defun samesetp (lst1 lst2)
    "Return t if two lists lst1 and lst2 are the same set. Otherwise, return nil. Not order-sensitive."
    ; (samesetp '(1 2 3) '(3 2 1)) => t
    ; (samesetp '(1 2 3) '(3 4 5)) => nil
    (cond
        ((null lst1) (null lst2)) ; If both lists are empty, return t.
        ((null lst2) nil) ; If lst2 is empty but lst1 is not, return nil.
        ((not (equalp (length lst1) (length lst2))) nil) ; If the lengths of lst1 and lst2 are not equal, return nil.
        ((member (car lst1) lst2) (samesetp (cdr lst1) (remove (car lst1) lst2))) ; If the first element of lst1 is in lst2, remove it from lst2 and check the rest of the lists.
        (t nil)
    )
)
```

---

# 問題18

```lisp
(defun depth (lst)
    "Return the depth of the deepest nested list in LST."
    ;(depth '(1 (2) 3))) => 2
    ;(depth '(1 2 (((3)) 4)) => 4
  (if (atom lst)
      0
      (1+ (apply #'max (mapcar #'depth lst)))))
```
